generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id        Int           @id @default(autoincrement())
  user_code String        @unique(map: "user_code") @db.VarChar(20)
  password  String        @db.VarChar(255)
  role      accounts_role
  students  students[]
  teachers  teachers[]
}

model announcements {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(200)
  content      String    @db.Text
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  category     String    @default("general") @db.VarChar(50)
  code         String?   @unique @default(uuid()) @db.VarChar(64)
  history      Json?
  recipients   Json?
  scheduled_at DateTime? @db.Timestamp(0)
  send_time    DateTime? @db.Timestamp(0)
  sender       String    @default("Admin") @db.VarChar(100)
  status       String    @default("Đã gửi") @db.VarChar(30)
  target       String    @default("Toàn trường") @db.VarChar(255)
  type         String    @default("Khác") @db.VarChar(50)
  updated_at   DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  @@index([created_at])
}

model students {
  student_id   String         @id @db.VarChar(20)
  full_name    String         @db.VarChar(100)
  course       String         @db.VarChar(10)
  classes      String?        @db.VarChar(255)
  major        String?        @db.VarChar(100)
  advisor_name String?        @db.VarChar(100)
  email        String?        @db.VarChar(100)
  phone        String?        @db.VarChar(20)
  avatar_url   String?        @db.VarChar(255)
  status       student_status @default(active)
  account_id   Int?
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  accounts     accounts?      @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "students_ibfk_1")

  @@index([account_id], map: "account_id")
}

model teachers {
  teacher_id String    @id @db.VarChar(20)
  full_name  String    @db.VarChar(100)
  subject    String    @db.VarChar(100)
  classes    String?   @db.VarChar(255)
  email      String?   @db.VarChar(100)
  phone      String?   @db.VarChar(20)
  faculty    String?   @db.VarChar(100)
  status     String    @default("Đang dạy") @db.VarChar(50)
  account_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  accounts   accounts? @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "teachers_ibfk_1")
  classAssignments classes[] @relation("TeacherClasses")
  availability teacher_availability[]

  @@index([account_id], map: "account_id")
}

model classes {
  class_id     String   @id @db.VarChar(20)
  class_name   String   @db.VarChar(150)
  subject_code String   @db.VarChar(20)
  subject_name String   @db.VarChar(150)
  cohort       String   @db.VarChar(10)
  major        String?  @db.VarChar(100)
  teacher_id   String?  @db.VarChar(20)
  status       String   @default("Đang hoạt động") @db.VarChar(30)
  room         String?  @db.VarChar(50)
  schedule     String?  @db.VarChar(255)
  semester     String?  @db.VarChar(20)
  school_year  String?  @db.VarChar(20)
  description  String?  @db.Text
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  teacher      teachers? @relation("TeacherClasses", fields: [teacher_id], references: [teacher_id], onDelete: SetNull, onUpdate: NoAction)

  @@index([teacher_id], map: "classes_teacher_idx")
  @@index([cohort], map: "classes_cohort_idx")
}

model time_slots {
  slot_id    Int         @id
  start_time DateTime    @db.Time(0)
  end_time   DateTime    @db.Time(0)
  timetable  timetable[]
  teacherAvailability teacher_availability[]
  roomAvailability    room_availability[]

  @@index([slot_id], map: "time_slots_slot_idx")
}

model timetable {
  id          Int                   @id @default(autoincrement())
  classes     String                @db.VarChar(100)
  day_of_week timetable_day_of_week
  slot_id     Int
  room        String                @db.VarChar(50)
  week_key    String                @default("UNASSIGNED") @db.VarChar(20)
  teacher_id  String?               @db.VarChar(20)
  teacher_name String?              @db.VarChar(150)
  subject_name String?              @db.VarChar(150)
  room_name   String?               @db.VarChar(150)
  time_slots  time_slots            @relation(fields: [slot_id], references: [slot_id], onDelete: Cascade, map: "timetable_ibfk_1")

  @@index([week_key, day_of_week, slot_id], map: "timetable_week_slot_idx")
  @@index([week_key, teacher_id], map: "timetable_week_teacher_idx")
  @@index([slot_id], map: "slot_id")
}

model rooms {
  room_id   Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(50)
  name      String?  @db.VarChar(150)
  capacity  Int?
  location  String?  @db.VarChar(150)
  notes     String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)

  roomAvailability room_availability[]
}

model teacher_availability {
  id         Int                   @id @default(autoincrement())
  teacher_id String                @db.VarChar(20)
  day_of_week timetable_day_of_week
  slot_id    Int
  is_available Boolean             @default(true)

  teacher   teachers?  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "teacher_availability_teacher_fk")
  time_slot time_slots @relation(fields: [slot_id], references: [slot_id], onDelete: Cascade, onUpdate: NoAction, map: "teacher_availability_slot_fk")

  @@index([teacher_id, day_of_week, slot_id], map: "teacher_availability_idx")
  @@index([slot_id], map: "teacher_availability_slot_idx")
}

model room_availability {
  id         Int                   @id @default(autoincrement())
  room_code  String                @db.VarChar(50)
  day_of_week timetable_day_of_week
  slot_id    Int
  is_available Boolean             @default(true)

  room      rooms?      @relation(fields: [room_code], references: [code], onDelete: Cascade, onUpdate: NoAction, map: "room_availability_room_fk")
  time_slot time_slots @relation(fields: [slot_id], references: [slot_id], onDelete: Cascade, onUpdate: NoAction, map: "room_availability_slot_fk")

  @@index([room_code, day_of_week, slot_id], map: "room_availability_idx")
  @@index([slot_id], map: "room_availability_slot_idx")
}

model semester_attendance_stats {
  id               Int      @id @default(autoincrement())
  code             String   @unique @db.VarChar(20)
  name             String   @db.VarChar(100)
  total_students   Int
  attendance_ratio Float
  updated_at       DateTime @default(now()) @db.Timestamp(0)
}

model cohorts {
  id         Int      @id @default(autoincrement())
  code       String   @unique @db.VarChar(10)
  year       Int
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([year])
}

enum timetable_day_of_week {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

enum accounts_role {
  student
  teacher
  admin
}

enum student_status {
  active
  locked
}

"use client";

import Link from "next/link";
import { useCallback, useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { apiFetch, apiFetchJson } from "../../lib/authClient";

type Role = "Admin" | "Gi·∫£ng vi√™n" | "Sinh vi√™n";
type RoleKey = "admin" | "teacher" | "student";
type Status = "Ho·∫°t ƒë·ªông" | "B·ªã kh√≥a" | "Ch·ªù k√≠ch ho·∫°t";
type StatusKey = "active" | "locked" | "pending";

type Account = {
  id: string;
  avatar: string;
  name: string;
  code: string;
  email: string;
  role: Role;
  roleKey: RoleKey;
  status: Status;
  statusKey: StatusKey;
  lastLogin: string;
  lastLoginRaw?: string | null;
  createdAt?: string | null;
};

type ApiAccount = {
  id: number;
  userCode: string;
  role: RoleKey;
  roleLabel: string;
  avatar: string;
  fullName: string | null;
  email: string | null;
  status: StatusKey;
  statusLabel: string;
  rawStatus: string | null;
  createdAt: string | null;
  lastLogin: string | null;
};

type AccountsResponse = {
  success: boolean;
  accounts: ApiAccount[];
  summary?: {
    total: number;
    byRole?: Record<string, number>;
    byStatus?: Record<string, number>;
  };
  message?: string;
};

type AccountsSummary = {
  total: number;
  byRole: Record<RoleKey, number>;
  byStatus: Record<StatusKey, number>;
};

const ROLE_LABEL_MAP: Record<RoleKey, Role> = {
  admin: "Admin",
  teacher: "Gi·∫£ng vi√™n",
  student: "Sinh vi√™n",
};

const STATUS_LABEL_MAP: Record<StatusKey, Status> = {
  active: "Ho·∫°t ƒë·ªông",
  locked: "B·ªã kh√≥a",
  pending: "Ch·ªù k√≠ch ho·∫°t",
};

const AVATAR_MAP: Record<RoleKey, string> = {
  admin: "üë§",
  teacher: "üßë‚Äçüè´",
  student: "üéì",
};

const ROLE_FILTER_LABEL_TO_KEY: Record<string, RoleKey | null> = {
  "T·∫•t c·∫£ vai tr√≤": null,
  Admin: "admin",
  "Gi·∫£ng vi√™n": "teacher",
  "Sinh vi√™n": "student",
};

const STATUS_FILTER_LABEL_TO_KEY: Record<string, StatusKey | null> = {
  "T·∫•t c·∫£ tr·∫°ng th√°i": null,
  "Ho·∫°t ƒë·ªông": "active",
  "B·ªã kh√≥a": "locked",
  "Ch·ªù k√≠ch ho·∫°t": "pending",
};

const roleLabelToKey = (label: Role): RoleKey => {
  switch (label) {
    case "Admin":
      return "admin";
    case "Gi·∫£ng vi√™n":
      return "teacher";
    default:
      return "student";
  }
};

const statusLabelToKey = (label: Status): StatusKey => {
  switch (label) {
    case "B·ªã kh√≥a":
      return "locked";
    case "Ch·ªù k√≠ch ho·∫°t":
      return "pending";
    default:
      return "active";
  }
};

const formatDateTime = (input?: string | null) => {
  if (!input) return "--";
  const date = new Date(input);
  if (Number.isNaN(date.getTime())) return "--";
  return new Intl.DateTimeFormat("vi-VN", {
    dateStyle: "short",
    timeStyle: "short",
  }).format(date);
};

const mapApiAccount = (item: ApiAccount): Account => {
  const roleKey = item.role ?? "admin";
  const statusKey = item.status ?? "active";
  const name = item.fullName?.trim() || item.userCode;
  return {
    id: String(item.userCode || item.id),
    avatar: item.avatar || AVATAR_MAP[roleKey] || "üë•",
    name,
    code: item.userCode,
    email: item.email?.trim() ?? "",
    role: ROLE_LABEL_MAP[roleKey] ?? "Admin",
    roleKey,
    status: STATUS_LABEL_MAP[statusKey] ?? "Ho·∫°t ƒë·ªông",
    statusKey,
    lastLogin: formatDateTime(item.lastLogin),
    lastLoginRaw: item.lastLogin,
    createdAt: item.createdAt,
  };
};

const emptySummary = (): AccountsSummary => ({
  total: 0,
  byRole: { admin: 0, teacher: 0, student: 0 },
  byStatus: { active: 0, locked: 0, pending: 0 },
});

const normalizeSummary = (raw?: AccountsResponse["summary"]): AccountsSummary | null => {
  if (!raw) return null;
  return {
    total: Number(raw.total ?? 0),
    byRole: {
      admin: Number(raw.byRole?.admin ?? 0),
      teacher: Number(raw.byRole?.teacher ?? 0),
      student: Number(raw.byRole?.student ?? 0),
    },
    byStatus: {
      active: Number(raw.byStatus?.active ?? 0),
      locked: Number(raw.byStatus?.locked ?? 0),
      pending: Number(raw.byStatus?.pending ?? 0),
    },
  };
};

const computeSummaryFromAccounts = (accounts: Account[]): AccountsSummary => {
  return accounts.reduce<AccountsSummary>((acc, item) => {
    acc.total += 1;
    acc.byRole[item.roleKey] += 1;
    acc.byStatus[item.statusKey] += 1;
    return acc;
  }, emptySummary());
};

export default function AdminAccountsPage() {
  const router = useRouter();
  const [collapsed, setCollapsed] = useState(false);
  const [dark, setDark] = useState(false);
  const [notifCount] = useState(2);
  const [search, setSearch] = useState("");
  const [filterRole, setFilterRole] = useState("T·∫•t c·∫£ vai tr√≤");
  const [filterStatus, setFilterStatus] = useState("T·∫•t c·∫£ tr·∫°ng th√°i");
  const [filterDate, setFilterDate] = useState("T·∫•t c·∫£");
  const [list, setList] = useState<Account[]>([]);
  const [summary, setSummary] = useState<AccountsSummary>(emptySummary());
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [sortKey, setSortKey] = useState<keyof Account>("name");
  const [sortAsc, setSortAsc] = useState(true);
  const [selected, setSelected] = useState<Set<string>>(new Set());
  const [modalOpen, setModalOpen] = useState(false);
  const [resetOpen, setResetOpen] = useState<null | Account>(null);
  const [edit, setEdit] = useState<Account | null>(null);
  const [page, setPage] = useState(1);
  const pageSize = 8;

  const updateList = useCallback((updater: (prev: Account[]) => Account[]) => {
    setList((prev) => {
      const next = updater(prev);
      setSummary(computeSummaryFromAccounts(next));
      return next;
    });
  }, [setSummary]);

  const fetchAccounts = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await apiFetchJson<AccountsResponse>("/api/admin/accounts");
      const accounts = Array.isArray(data.accounts) ? data.accounts.map(mapApiAccount) : [];
      setList(accounts);
      const nextSummary = normalizeSummary(data.summary) ?? computeSummaryFromAccounts(accounts);
      setSummary(nextSummary);
      setSelected(new Set());
      setPage(1);
    } catch (err) {
      console.error("admin accounts fetch error", err);
      const message = err instanceof Error && err.message ? err.message : "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch t√†i kho·∫£n";
      setError(message);
      if (message.toLowerCase().includes("unauthorized")) {
        router.push("/login");
      }
      setList([]);
      setSummary(emptySummary());
    } finally {
      setLoading(false);
    }
  }, [router]);

  useEffect(() => {
    fetchAccounts();
  }, [fetchAccounts]);

  useEffect(() => {
    try {
      const saved = localStorage.getItem("sas_settings");
      if (saved) {
        const s = JSON.parse(saved);
        setDark(!!s.themeDark);
        document.documentElement.style.colorScheme = s.themeDark ? "dark" : "light";
      }
    } catch {}
  }, []);

  const toggleDark = () => {
    const next = !dark;
    setDark(next);
    try {
      const saved = localStorage.getItem("sas_settings");
      const prev = saved ? JSON.parse(saved) : {};
      const merged = { ...prev, themeDark: next };
      localStorage.setItem("sas_settings", JSON.stringify(merged));
      document.documentElement.style.colorScheme = next ? "dark" : "light";
      window.dispatchEvent(new CustomEvent("sas_settings_changed" as any, { detail: merged }));
    } catch {}
  };

  const toggleSort = (key: keyof Account) => {
    if (sortKey === key) setSortAsc(!sortAsc); else { setSortKey(key); setSortAsc(true); }
  };

  const filtered = useMemo(() => {
    const searchTerm = search.trim().toLowerCase();
    const roleKeyFilter = ROLE_FILTER_LABEL_TO_KEY[filterRole] ?? null;
    const statusKeyFilter = STATUS_FILTER_LABEL_TO_KEY[filterStatus] ?? null;

    const within7Days = (lastLogin?: string | null) => {
      if (!lastLogin) return false;
      const parsed = new Date(lastLogin);
      if (Number.isNaN(parsed.getTime())) return false;
      const diff = Date.now() - parsed.getTime();
      const sevenDaysMs = 7 * 24 * 60 * 60 * 1000;
      return diff <= sevenDaysMs;
    };

    const filteredData = list.filter((account) => {
      const matchesSearch = !searchTerm
        || [account.name, account.email, account.code]
          .filter(Boolean)
          .some((value) => value.toLowerCase().includes(searchTerm));
      if (!matchesSearch) return false;

      if (roleKeyFilter && account.roleKey !== roleKeyFilter) return false;
      if (statusKeyFilter && account.statusKey !== statusKeyFilter) return false;

      if (filterDate === "7 ng√†y") {
        if (!within7Days(account.lastLoginRaw)) return false;
      }

      return true;
    });

    const getComparableValue = (account: Account, key: keyof Account) => {
      const value = account[key];
      if (value == null) return "";
      if (typeof value === "string") return value.toLowerCase();
      return String(value).toLowerCase();
    };

    const sorted = [...filteredData].sort((a, b) => {
      const va = getComparableValue(a, sortKey);
      const vb = getComparableValue(b, sortKey);
      const result = va.localeCompare(vb, "vi");
      return sortAsc ? result : -result;
    });

    return sorted;
  }, [list, search, filterRole, filterStatus, filterDate, sortKey, sortAsc]);

  const total = filtered.length;
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const pageData = filtered.slice((page-1)*pageSize, page*pageSize);

  const allSelected = selected.size > 0 && pageData.every((a) => selected.has(a.id));
  const toggleSelectAll = () => {
    if (allSelected) setSelected(new Set()); else setSelected(new Set(pageData.map(a=>a.id)));
  };
  const toggleSelect = (id: string) => {
    setSelected((prev) => { const next = new Set(prev); if (next.has(id)) next.delete(id); else next.add(id); return next; });
  };

  const bulkLock = (lock: boolean) => {
    const nextStatus: Status = lock ? "B·ªã kh√≥a" : "Ho·∫°t ƒë·ªông";
    const nextStatusKey = statusLabelToKey(nextStatus);
    updateList((prev) => prev.map((a) => {
      if (!selected.has(a.id)) return a;
      return { ...a, status: nextStatus, statusKey: nextStatusKey };
    }));
    setSelected(new Set());
  };
  const bulkDelete = () => {
    if (!confirm("X√≥a c√°c t√†i kho·∫£n ƒë√£ ch·ªçn?")) return;
    updateList((prev) => prev.filter((a) => !selected.has(a.id)));
    setSelected(new Set());
  };

  const onOpenCreate = () => { setEdit(null); setModalOpen(true); };
  const onOpenEdit = (a: Account) => { setEdit(a); setModalOpen(true); };

  const stats = useMemo(() => {
    return {
      total: summary.total,
      gv: summary.byRole.teacher,
      sv: summary.byRole.student,
      ad: summary.byRole.admin,
      locked: summary.byStatus.locked,
      pending: summary.byStatus.pending,
    };
  }, [summary]);

  const [formName, setFormName] = useState("");
  const [formEmail, setFormEmail] = useState("");
  const [formCode, setFormCode] = useState("");
  const [formRole, setFormRole] = useState<Role>("Sinh vi√™n");
  const [formStatus, setFormStatus] = useState<Status>("Ho·∫°t ƒë·ªông");
  const [formPassword, setFormPassword] = useState("");
  const [formNote, setFormNote] = useState("");
  const [perm, setPerm] = useState<Record<string, boolean>>({
    view_students: true,
    edit_schedule: true,
    manage_lecturers: false,
    export_reports: true,
  });

  useEffect(() => {
    if (edit) {
      setFormName(edit.name); setFormEmail(edit.email); setFormCode(edit.code); setFormRole(edit.role); setFormStatus(edit.status); setFormPassword(""); setFormNote("");
      setPerm({ view_students: true, edit_schedule: true, manage_lecturers: edit.role!=="Sinh vi√™n", export_reports: true });
    } else {
      setFormName(""); setFormEmail(""); setFormCode(""); setFormRole("Sinh vi√™n"); setFormStatus("Ho·∫°t ƒë·ªông"); setFormPassword(""); setFormNote("");
      setPerm({ view_students: true, edit_schedule: false, manage_lecturers: false, export_reports: false });
    }
  }, [modalOpen, edit]);

  const randomPass = () => Math.random().toString(36).slice(2, 10);
  const onSubmit = (sendMail: boolean) => {
    const normalizedRoleKey = roleLabelToKey(formRole);
    const normalizedStatusKey = statusLabelToKey(formStatus);
    if (edit) {
      updateList((prev) =>
        prev.map((a) =>
          a.id === edit.id
            ? {
                ...a,
                name: formName,
                email: formEmail,
                code: formCode,
                role: formRole,
                roleKey: normalizedRoleKey,
                status: formStatus,
                statusKey: normalizedStatusKey,
              }
            : a,
        ),
      );
    } else {
      const id = Math.random().toString(36).slice(2, 9);
      const autoCode = formCode ||
        (formRole === "Sinh vi√™n"
          ? `SV${Date.now().toString().slice(-5)}`
          : formRole === "Gi·∫£ng vi√™n"
            ? `GV${Date.now().toString().slice(-4)}`
            : `AD${Date.now().toString().slice(-3)}`);
      const avatar = AVATAR_MAP[normalizedRoleKey] ?? "üë•";
      const newAccount: Account = {
        id,
        avatar,
        name: formName,
        code: autoCode,
        email: formEmail,
        role: formRole,
        roleKey: normalizedRoleKey,
        status: formStatus,
        statusKey: normalizedStatusKey,
        lastLogin: "--",
        lastLoginRaw: null,
        createdAt: new Date().toISOString(),
      };
      updateList((prev) => prev.concat(newAccount));
    }
    if (!formPassword) setFormPassword(randomPass());
    setModalOpen(false);
    if (sendMail) alert("ƒê√£ g·ª≠i email th√¥ng b√°o t√†i kho·∫£n");
  };

  const onResetPassword = (acc: Account) => { setResetOpen(acc); };
  const doResetPassword = () => { setResetOpen(null); alert("ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† g·ª≠i email"); };

  const Shell = ({ children }: { children: React.ReactNode }) => (
    <div className={`layout ${collapsed ? "collapsed" : ""}`}>
      <aside className="sidebar">
        <div className="side-header">
          <button className="collapse-btn" onClick={() => setCollapsed(!collapsed)} title={collapsed ? "M·ªü r·ªông" : "Thu g·ªçn"}>
            {collapsed ? "‚Æû" : "‚Æú"}
          </button>
          {!collapsed && <div className="side-name">Smart Attendance</div>}
        </div>
        <nav className="side-nav">
          <Link href="/tongquan_ad" className="side-link" title="Dashboard">üè† {!collapsed && "Dashboard"}</Link>
          <Link href="/thongbao_ad" className="side-link" title="Th√¥ng b√°o">üì¢ {!collapsed && "Th√¥ng b√°o"}</Link>
          <Link href="/sinhvien_ad" className="side-link" title="Sinh vi√™n">üë®‚Äçüéì {!collapsed && "Sinh vi√™n"}</Link>
          <Link href="/giangvien_ad" className="side-link" title="Gi·∫£ng vi√™n">üë©‚Äçüè´ {!collapsed && "Gi·∫£ng vi√™n"}</Link>
          <Link href="/lophoc_ad" className="side-link" title="L·ªõp h·ªçc">üè´ {!collapsed && "L·ªõp h·ªçc"}</Link>
          <Link href="/lichhoc_ad" className="side-link" title="L·ªãch h·ªçc">üìÖ {!collapsed && "L·ªãch h·ªçc"}</Link>
          <Link href="/taikhoan_ad" className="side-link active" title="T√†i kho·∫£n">üîë {!collapsed && "T√†i kho·∫£n"}</Link>
          <Link href="/caidat_ad" className="side-link" title="C·∫•u h√¨nh">‚öôÔ∏è {!collapsed && "C·∫•u h√¨nh"}</Link>
        </nav>
      </aside>

      <header className="topbar">
        <div className="top-left">
          <div className="page-title">Qu·∫£n l√Ω T√†i kho·∫£n</div>
        </div>
        <div className="controls">
          <div className="search">
            <i className="fas fa-search" />
            <input value={search} onChange={(e)=>{ setSearch(e.target.value); setPage(1); }} placeholder="T√¨m t√™n, email, m√£ s·ªë" />
          </div>
          <div className="filter-line">
            <select className="input" value={filterRole} onChange={(e)=>{ setFilterRole(e.target.value); setPage(1); }}>
              <option>T·∫•t c·∫£ vai tr√≤</option>
              <option>Admin</option>
              <option>Gi·∫£ng vi√™n</option>
              <option>Sinh vi√™n</option>
            </select>
            <select className="input" value={filterStatus} onChange={(e)=>{ setFilterStatus(e.target.value); setPage(1); }}>
              <option>T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option>Ho·∫°t ƒë·ªông</option>
              <option>B·ªã kh√≥a</option>
              <option>Ch·ªù k√≠ch ho·∫°t</option>
            </select>
            <select className="input" value={filterDate} onChange={(e)=>{ setFilterDate(e.target.value); setPage(1); }}>
              <option>T·∫•t c·∫£</option>
              <option>7 ng√†y</option>
            </select>
          </div>
          <button className="btn-primary" onClick={onOpenCreate}>+ T·∫°o t√†i kho·∫£n m·ªõi</button>
          <button className="btn-outline" onClick={()=>alert("Xu·∫•t Excel/PDF")}>üìã Xu·∫•t danh s√°ch</button>
          <button className="icon-btn" onClick={toggleDark} title="Chuy·ªÉn giao di·ªán">{dark?"üåô":"üåû"}</button>
          <button className="icon-btn notif" title="Th√¥ng b√°o">üîî{notifCount>0 && <span className="badge">{notifCount}</span>}</button>
          <div className="avatar-menu">
            <div className="avatar">üßë‚Äçüíº</div>
            <div className="dropdown">
              <a href="#" onClick={(e)=>e.preventDefault()}>H·ªì s∆°</a>
              <a href="#" onClick={(e)=>{e.preventDefault(); if(confirm("ƒêƒÉng xu·∫•t?")){ localStorage.removeItem("sas_user"); router.push("/login"); }}}>ƒêƒÉng xu·∫•t</a>
            </div>
          </div>
          <button className="qr-btn" onClick={async ()=>{ 
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?')) {
              try { await fetch('http://localhost:8080/api/auth/logout', { method: 'POST', credentials: 'include' }); } catch {}
              try { localStorage.removeItem('sas_user'); } catch {}
              router.push('/login');
            }
          }}>üö™ ƒêƒÉng xu·∫•t</button>
        </div>
      </header>

      <main className="main">{children}</main>
    </div>
  );

  const anySelected = selected.size > 0;

  return (
    <Shell>
      <section className="cards">
        <div className="card"><div className="card-title">üë• T·ªïng t√†i kho·∫£n</div><div className="card-num">{stats.total.toLocaleString()}</div></div>
        <div className="card"><div className="card-title">üßë‚Äçüè´ Gi·∫£ng vi√™n</div><div className="card-num">{stats.gv}</div></div>
        <div className="card"><div className="card-title">üéì Sinh vi√™n</div><div className="card-num">{stats.sv}</div></div>
        <div className="card"><div className="card-title">üõ† Admin</div><div className="card-num">{stats.ad}</div></div>
        <div className="card"><div className="card-title">‚ö†Ô∏è B·ªã kh√≥a</div><div className="card-num">{stats.locked}</div></div>
        <div className="card"><div className="card-title">üîê Ch∆∞a k√≠ch ho·∫°t</div><div className="card-num">{stats.pending}</div></div>
      </section>

      <div className="toolbar-sub">
        <div className="left">
          <button className="chip" disabled={!anySelected} onClick={()=>bulkLock(false)}>‚úÖ M·ªü kh√≥a</button>
          <button className="chip" disabled={!anySelected} onClick={()=>bulkLock(true)}>üîí Kh√≥a t√†i kho·∫£n</button>
          <button className="chip" disabled={!anySelected} onClick={()=>alert("G·ª≠i mail th√¥ng b√°o")}>üì© G·ª≠i mail</button>
          <button className="chip danger" disabled={!anySelected} onClick={bulkDelete}>üóë X√≥a</button>
        </div>
        <div className="right">{anySelected ? `${selected.size} ƒë√£ ch·ªçn` : ""}</div>
      </div>

      <div className="panel">
        <div className="table accounts-table">
          <div className="thead">
            <div><input type="checkbox" checked={allSelected} onChange={toggleSelectAll} /></div>
            <div>Avatar</div>
            <div className="th" onClick={()=>toggleSort("name")}>H·ªç t√™n</div>
            <div className="th" onClick={()=>toggleSort("code")}>M√£</div>
            <div className="th" onClick={()=>toggleSort("email")}>Email</div>
            <div className="th" onClick={()=>toggleSort("role")}>Vai tr√≤</div>
            <div className="th" onClick={()=>toggleSort("status")}>Tr·∫°ng th√°i</div>
            <div className="th" onClick={()=>toggleSort("lastLogin")}>ƒêƒÉng nh·∫≠p g·∫ßn nh·∫•t</div>
            <div>H√†nh ƒë·ªông</div>
          </div>
          <div className="tbody">
            {pageData.map((a) => (
              <div className="trow" key={a.id}>
                <div><input type="checkbox" checked={selected.has(a.id)} onChange={(e)=>{e.stopPropagation(); toggleSelect(a.id);}} /></div>
                <div>{a.avatar}</div>
                <div>{a.name}</div>
                <div>{a.code}</div>
                <div>{a.email}</div>
                <div><span className="pill role">{a.role}</span></div>
                <div><span className={`status ${a.status}`.replace(/\s/g,"-")}>{a.status}</span></div>
                <div>{a.lastLogin}</div>
                <div className="actions">
                  <button className="icon-btn" title="S·ª≠a" onClick={(e)=>{e.stopPropagation(); onOpenEdit(a);}}>‚úèÔ∏è</button>
                  {a.status!=="Ho·∫°t ƒë·ªông" ? (
                    <button
                      className="icon-btn"
                      title="M·ªü kh√≥a"
                      onClick={(e)=>{
                        e.stopPropagation();
                        updateList((prev)=>
                          prev.map((x)=>
                            x.id===a.id
                              ? { ...x, status: "Ho·∫°t ƒë·ªông", statusKey: "active" }
                              : x,
                          ),
                        );
                      }}
                    >üîì</button>
                  ) : (
                    <button
                      className="icon-btn"
                      title="Kh√≥a"
                      onClick={(e)=>{
                        e.stopPropagation();
                        updateList((prev)=>
                          prev.map((x)=>
                            x.id===a.id
                              ? { ...x, status: "B·ªã kh√≥a", statusKey: "locked" }
                              : x,
                          ),
                        );
                      }}
                    >üîí</button>
                  )}
                  <button className="icon-btn" title="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u" onClick={(e)=>{e.stopPropagation(); onResetPassword(a);}}>üîÑ</button>
                  <button className="icon-btn" title="X√≥a" onClick={(e)=>{e.stopPropagation(); if(confirm("X√≥a t√†i kho·∫£n?")) updateList(prev=>prev.filter(x=>x.id!==a.id));}}>üóë</button>
                </div>
              </div>
            ))}
          </div>
        </div>
        <div className="pagination">
          <button className="chip" disabled={page<=1} onClick={()=>setPage(p=>Math.max(1,p-1))}>¬´ Tr∆∞·ªõc</button>
          <span className="page-info">Trang {page}/{totalPages}</span>
          <button className="chip" disabled={page>=totalPages} onClick={()=>setPage(p=>Math.min(totalPages,p+1))}>Sau ¬ª</button>
        </div>
      </div>

      {resetOpen && (
        <div className="modal" onClick={()=>setResetOpen(null)}>
          <div className="modal-content small" onClick={(e)=>e.stopPropagation()}>
            <div className="modal-head">
              <div className="title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</div>
              <button className="icon-btn" onClick={()=>setResetOpen(null)}>‚úñ</button>
            </div>
            <div className="modal-body">
              <div>B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n <strong>{resetOpen.name}</strong>?</div>
            </div>
            <div className="modal-foot">
              <button className="qr-btn" onClick={()=>setResetOpen(null)}>H·ªßy</button>
              <button className="qr-btn" onClick={doResetPassword}>‚úÖ ƒê·ªìng √Ω</button>
            </div>
          </div>
        </div>
      )}

      {modalOpen && (
        <div className="modal" onClick={() => setModalOpen(false)}>
          <div className="modal-content wide" onClick={(e)=>e.stopPropagation()}>
            <div className="modal-head">
              <div className="title">{edit?"Ch·ªânh s·ª≠a t√†i kho·∫£n":"T·∫°o t√†i kho·∫£n m·ªõi"}</div>
              <button className="icon-btn" onClick={() => setModalOpen(false)}>‚úñ</button>
            </div>
            <div className="modal-body grid2">
              <div className="form-col">
                <label className="label">H·ªç v√† t√™n</label>
                <input className="input" value={formName} onChange={(e)=>setFormName(e.target.value)} placeholder="Nguy·ªÖn VƒÉn A" />
                <label className="label">Email ƒëƒÉng nh·∫≠p</label>
                <input className="input" value={formEmail} onChange={(e)=>setFormEmail(e.target.value)} placeholder="email@school.edu.vn" />
                <label className="label">M√£ s·ªë</label>
                <input className="input" value={formCode} onChange={(e)=>setFormCode(e.target.value)} placeholder="SVxxxx / GVxxx / ADxxx" />
                <label className="label">Vai tr√≤</label>
                <select className="input" value={formRole} onChange={(e)=>setFormRole(e.target.value as Role)}>
                  <option>Admin</option>
                  <option>Gi·∫£ng vi√™n</option>
                  <option>Sinh vi√™n</option>
                </select>
                <label className="label">Tr·∫°ng th√°i</label>
                <select className="input" value={formStatus} onChange={(e)=>setFormStatus(e.target.value as Status)}>
                  <option>Ho·∫°t ƒë·ªông</option>
                  <option>B·ªã kh√≥a</option>
                  <option>Ch·ªù k√≠ch ho·∫°t</option>
                </select>
                <label className="label">M·∫≠t kh·∫©u</label>
                <div className="inline">
                  <input className="input" value={formPassword} onChange={(e)=>setFormPassword(e.target.value)} placeholder="T·ª± ƒë·ªông n·∫øu ƒë·ªÉ tr·ªëng" />
                  <button className="chip" onClick={()=>setFormPassword(randomPass())}>T·∫°o ng·∫´u nhi√™n</button>
                </div>
              </div>
              <div className="form-col">
                <label className="label">Ghi ch√∫</label>
                <textarea className="input" rows={3} value={formNote} onChange={(e)=>setFormNote(e.target.value)} placeholder="Ghi ch√∫ n·∫øu c·∫ßn..."></textarea>
                <div className="section-title">Ph√¢n quy·ªÅn chi ti·∫øt</div>
                <div className="perm-list">
                  <label><input type="checkbox" checked={perm.view_students} onChange={(e)=>setPerm(prev=>({...prev, view_students: e.target.checked}))} /> Xem danh s√°ch sinh vi√™n</label>
                  <label><input type="checkbox" checked={perm.edit_schedule} onChange={(e)=>setPerm(prev=>({...prev, edit_schedule: e.target.checked}))} /> Ch·ªânh s·ª≠a l·ªãch h·ªçc</label>
                  <label><input type="checkbox" checked={perm.manage_lecturers} onChange={(e)=>setPerm(prev=>({...prev, manage_lecturers: e.target.checked}))} /> Qu·∫£n l√Ω gi·∫£ng vi√™n</label>
                  <label><input type="checkbox" checked={perm.export_reports} onChange={(e)=>setPerm(prev=>({...prev, export_reports: e.target.checked}))} /> Xu·∫•t b√°o c√°o</label>
                </div>
              </div>
            </div>
            <div className="modal-foot space">
              <button className="qr-btn" onClick={()=>setModalOpen(false)}>H·ªßy</button>
              <div className="actions-row">
                <button className="qr-btn" onClick={()=>onSubmit(false)}>üíæ L∆∞u</button>
                <button className="qr-btn" onClick={()=>onSubmit(true)}>üì© L∆∞u & G·ª≠i mail</button>
              </div>
            </div>
          </div>
        </div>
      )}
    </Shell>
  );
}

